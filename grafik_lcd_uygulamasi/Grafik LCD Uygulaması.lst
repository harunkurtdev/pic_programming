CCS PCM C Compiler, Version 4.084, 36728               06-Aðu-18 14:33

               Filename: C:\Users\nesibe\Desktop\KARIÞIK\3.Baský PROTEUS-ISIS_HEX-C Dosyalarý\Grafik LCD Uygulamasý\Grafik LCD Uygulamasý.lst

               ROM used: 2474 words (30%)
                         Largest free fragment is 2048
               RAM used: 29 (8%) at main() level
                         69 (19%) worst case
               Stack:    4 locations

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   06C
0003:  NOP
.................... /******************************************************* 
....................       PIC16F877 ile Grafik LCD Uygulamasý 
.................... *******************************************************/ 
....................  
.................... #include <16f877.h>     // Kullanýlacak denetleyicinin baþlýk dosyasý tanýtýlýyor. 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
....................  
.................... #fuses HS,NOWDT,NOPROTECT,NOBROWNOUT,NOLVP,NOPUT,NOWRT,NODEBUG,NOCPD // Denetleyici konfigürasyon ayarlarý 
....................  
.................... #use delay (clock=20000000) // Gecikme fonksiyonu için kullanýlacak osilatör frekansý belirtiliyor. 
*
0440:  MOVLW  37
0441:  MOVWF  04
0442:  BCF    03.7
0443:  MOVF   00,W
0444:  BTFSC  03.2
0445:  GOTO   453
0446:  MOVLW  06
0447:  MOVWF  78
0448:  CLRF   77
0449:  DECFSZ 77,F
044A:  GOTO   449
044B:  DECFSZ 78,F
044C:  GOTO   448
044D:  MOVLW  7B
044E:  MOVWF  77
044F:  DECFSZ 77,F
0450:  GOTO   44F
0451:  DECFSZ 00,F
0452:  GOTO   446
0453:  RETLW  00
....................  
.................... #include <HDM64GS12.c> // HDM64GS12.c dosyasý programa ekleniyor 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_B0   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_B1   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_B2   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_B4   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_B5   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_C0   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(int8 x, int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    int8 left[512]; 
....................    int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
0239:  BCF    20.0
023A:  MOVF   20,W
023B:  BSF    03.5
023C:  MOVWF  07
023D:  BCF    03.5
023E:  BSF    07.0
....................    output_low(GLCD_E); 
023F:  BSF    03.5
0240:  BCF    06.5
0241:  BCF    03.5
0242:  BCF    06.5
....................    output_low(GLCD_CS1); 
0243:  BSF    03.5
0244:  BCF    06.0
0245:  BCF    03.5
0246:  BCF    06.0
....................    output_low(GLCD_CS2); 
0247:  BSF    03.5
0248:  BCF    06.1
0249:  BCF    03.5
024A:  BCF    06.1
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
024B:  BSF    03.5
024C:  BCF    06.2
024D:  BCF    03.5
024E:  BCF    06.2
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
024F:  CLRF   5D
0250:  MOVLW  C0
0251:  MOVWF  5E
0252:  CALL   1EA
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
0253:  MOVLW  01
0254:  MOVWF  5D
0255:  MOVLW  C0
0256:  MOVWF  5E
0257:  CALL   1EA
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
0258:  CLRF   5D
0259:  MOVLW  40
025A:  MOVWF  5E
025B:  CALL   1EA
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
025C:  MOVLW  01
025D:  MOVWF  5D
025E:  MOVLW  40
025F:  MOVWF  5E
0260:  CALL   1EA
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
0261:  CLRF   5D
0262:  MOVLW  B8
0263:  MOVWF  5E
0264:  CALL   1EA
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
0265:  MOVLW  01
0266:  MOVWF  5D
0267:  MOVLW  B8
0268:  MOVWF  5E
0269:  CALL   1EA
....................  
....................    if(mode == ON) 
026A:  DECFSZ 36,W
026B:  GOTO   276
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
026C:  CLRF   5D
026D:  MOVLW  3F
026E:  MOVWF  5E
026F:  CALL   1EA
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
0270:  MOVLW  01
0271:  MOVWF  5D
0272:  MOVLW  3F
0273:  MOVWF  5E
0274:  CALL   1EA
....................    } 
....................    else 
0275:  GOTO   27F
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
0276:  CLRF   5D
0277:  MOVLW  3E
0278:  MOVWF  5E
0279:  CALL   1EA
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
027A:  MOVLW  01
027B:  MOVWF  5D
027C:  MOVLW  3E
027D:  MOVWF  5E
027E:  CALL   1EA
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
027F:  CLRF   37
....................  
....................    #ifdef FAST_GLCD 
....................    glcd_update(); 
....................    #endif 
.................... } 
*
02C5:  RETLW  00
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    int8 i, j; 
....................    int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(int8 x, int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8* p; 
....................    int16 temp; 
....................    temp =  y/8; 
....................    temp *= 64; 
....................    temp += x; 
....................  
....................    if(x > 63) 
....................    { 
....................       p = displayData.right + temp - 64; 
....................    } 
....................    else 
....................    { 
....................       p = displayData.left + temp; 
....................    } 
....................  
....................    if(color) 
....................    { 
....................       bit_set(*p, y%8); 
....................    } 
....................    else 
....................    { 
....................       bit_clear(*p, y%8); 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
*
02F4:  BCF    58.0
....................  
....................    if(x > 63)              // Check for first or second display area 
02F5:  MOVF   54,W
02F6:  SUBLW  3F
02F7:  BTFSC  03.0
02F8:  GOTO   2FC
....................    { 
....................       x -= 64; 
02F9:  MOVLW  40
02FA:  SUBWF  54,F
....................       side = GLCD_RIGHT; 
02FB:  BSF    58.0
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
02FC:  BSF    03.5
02FD:  BCF    06.2
02FE:  BCF    03.5
02FF:  BCF    06.2
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
0300:  BCF    54.7
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
0301:  BSF    54.6
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
0302:  MOVLW  00
0303:  BTFSC  58.0
0304:  MOVLW  01
0305:  MOVWF  59
0306:  MOVWF  5D
0307:  MOVF   54,W
0308:  MOVWF  5E
0309:  CALL   1EA
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
030A:  MOVLW  00
030B:  BTFSC  58.0
030C:  MOVLW  01
030D:  MOVWF  59
030E:  RRF    55,W
030F:  MOVWF  77
0310:  RRF    77,F
0311:  RRF    77,F
0312:  MOVLW  1F
0313:  ANDWF  77,F
0314:  MOVF   77,W
0315:  ANDLW  BF
0316:  IORLW  B8
0317:  MOVWF  5C
0318:  MOVF   59,W
0319:  MOVWF  5D
031A:  MOVF   5C,W
031B:  MOVWF  5E
031C:  CALL   1EA
....................    output_high(GLCD_DI);                        // Set for data 
031D:  BSF    03.5
031E:  BCF    06.2
031F:  BCF    03.5
0320:  BSF    06.2
....................    glcd_readByte(side);                         // Need two reads to get data 
0321:  MOVLW  00
0322:  BTFSC  58.0
0323:  MOVLW  01
0324:  MOVWF  59
0325:  MOVWF  5A
0326:  CALL   2C6
....................    data = glcd_readByte(side);                  //  at new address 
0327:  MOVLW  00
0328:  BTFSC  58.0
0329:  MOVLW  01
032A:  MOVWF  59
032B:  MOVWF  5A
032C:  CALL   2C6
032D:  MOVF   78,W
032E:  MOVWF  57
....................  
....................    if(color == ON) 
032F:  DECFSZ 56,W
0330:  GOTO   341
....................       bit_set(data, y%8);        // Turn the pixel on 
0331:  MOVF   55,W
0332:  ANDLW  07
0333:  MOVWF  59
0334:  MOVLW  01
0335:  MOVWF  77
0336:  MOVF   59,W
0337:  MOVWF  78
0338:  BTFSC  03.2
0339:  GOTO   33E
033A:  BCF    03.0
033B:  RLF    77,F
033C:  DECFSZ 78,F
033D:  GOTO   33A
033E:  MOVF   77,W
033F:  IORWF  57,F
....................    else                          // or 
0340:  GOTO   351
....................       bit_clear(data, y%8);      // turn the pixel off 
0341:  MOVF   55,W
0342:  ANDLW  07
0343:  MOVWF  59
0344:  MOVLW  01
0345:  MOVWF  77
0346:  MOVF   59,W
0347:  MOVWF  78
0348:  BTFSC  03.2
0349:  GOTO   34E
034A:  BCF    03.0
034B:  RLF    77,F
034C:  DECFSZ 78,F
034D:  GOTO   34A
034E:  MOVF   77,W
034F:  XORLW  FF
0350:  ANDWF  57,F
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
0351:  BSF    03.5
0352:  BCF    06.2
0353:  BCF    03.5
0354:  BCF    06.2
....................    glcd_writeByte(side, x);      // Set the horizontal address 
0355:  MOVLW  00
0356:  BTFSC  58.0
0357:  MOVLW  01
0358:  MOVWF  59
0359:  MOVWF  5D
035A:  MOVF   54,W
035B:  MOVWF  5E
035C:  CALL   1EA
....................    output_high(GLCD_DI);         // Set for data 
035D:  BSF    03.5
035E:  BCF    06.2
035F:  BCF    03.5
0360:  BSF    06.2
....................    glcd_writeByte(side, data);   // Write the pixel data 
0361:  MOVLW  00
0362:  BTFSC  58.0
0363:  MOVLW  01
0364:  MOVWF  59
0365:  MOVWF  5D
0366:  MOVF   57,W
0367:  MOVWF  5E
0368:  CALL   1EA
.................... } 
0369:  RETLW  00
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8  data; 
....................    int8  *p1, *p2; 
....................    int16 i; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................    data = 0xFF * color; 
....................  
....................    for(i=0; i<512; ++i) 
....................    { 
....................    	*p1++ = data; 
....................    	*p2++ = data; 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
*
0280:  CLRF   38
0281:  MOVF   38,W
0282:  SUBLW  07
0283:  BTFSS  03.0
0284:  GOTO   2C5
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
0285:  BSF    03.5
0286:  BCF    06.2
0287:  BCF    03.5
0288:  BCF    06.2
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
0289:  CLRF   5D
028A:  MOVLW  40
028B:  MOVWF  5E
028C:  CALL   1EA
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
028D:  MOVLW  01
028E:  MOVWF  5D
028F:  MOVLW  40
0290:  MOVWF  5E
0291:  CALL   1EA
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
0292:  MOVF   38,W
0293:  IORLW  B8
0294:  MOVWF  3A
0295:  CLRF   5D
0296:  MOVF   3A,W
0297:  MOVWF  5E
0298:  CALL   1EA
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
0299:  MOVF   38,W
029A:  IORLW  B8
029B:  MOVWF  3A
029C:  MOVLW  01
029D:  MOVWF  5D
029E:  MOVF   3A,W
029F:  MOVWF  5E
02A0:  CALL   1EA
....................       output_high(GLCD_DI);                     // Set for data 
02A1:  BSF    03.5
02A2:  BCF    06.2
02A3:  BCF    03.5
02A4:  BSF    06.2
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
02A5:  CLRF   39
02A6:  MOVF   39,W
02A7:  SUBLW  3F
02A8:  BTFSS  03.0
02A9:  GOTO   2C3
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
02AA:  MOVLW  FF
02AB:  MOVWF  48
02AC:  MOVF   37,W
02AD:  MOVWF  49
02AE:  CALL   214
02AF:  MOVF   78,W
02B0:  MOVWF  3A
02B1:  CLRF   5D
02B2:  MOVF   78,W
02B3:  MOVWF  5E
02B4:  CALL   1EA
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
02B5:  MOVLW  FF
02B6:  MOVWF  48
02B7:  MOVF   37,W
02B8:  MOVWF  49
02B9:  CALL   214
02BA:  MOVF   78,W
02BB:  MOVWF  3A
02BC:  MOVLW  01
02BD:  MOVWF  5D
02BE:  MOVF   78,W
02BF:  MOVWF  5E
02C0:  CALL   1EA
....................       } 
02C1:  INCF   39,F
02C2:  GOTO   2A6
....................    } 
02C3:  INCF   38,F
02C4:  GOTO   281
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    if(side)                   // Choose which side to write to 
*
01EA:  MOVF   5D,F
01EB:  BTFSC  03.2
01EC:  GOTO   1F2
....................       output_high(GLCD_CS2); 
01ED:  BSF    03.5
01EE:  BCF    06.1
01EF:  BCF    03.5
01F0:  BSF    06.1
....................    else 
01F1:  GOTO   1F6
....................       output_high(GLCD_CS1); 
01F2:  BSF    03.5
01F3:  BCF    06.0
01F4:  BCF    03.5
01F5:  BSF    06.0
....................  
....................    output_low(GLCD_RW);       // Set for writing 
01F6:  BSF    03.5
01F7:  BCF    06.4
01F8:  BCF    03.5
01F9:  BCF    06.4
....................    output_d(data);            // Put the data on the port 
01FA:  BSF    03.5
01FB:  CLRF   08
01FC:  BCF    03.5
01FD:  MOVF   5E,W
01FE:  MOVWF  08
....................    delay_cycles(1); 
01FF:  NOP
....................    output_high(GLCD_E);       // Pulse the enable pin 
0200:  BSF    03.5
0201:  BCF    06.5
0202:  BCF    03.5
0203:  BSF    06.5
....................    delay_cycles(5); 
0204:  GOTO   205
0205:  GOTO   206
0206:  NOP
....................    output_low(GLCD_E); 
0207:  BSF    03.5
0208:  BCF    06.5
0209:  BCF    03.5
020A:  BCF    06.5
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
020B:  BSF    03.5
020C:  BCF    06.0
020D:  BCF    03.5
020E:  BCF    06.0
....................    output_low(GLCD_CS2); 
020F:  BSF    03.5
0210:  BCF    06.1
0211:  BCF    03.5
0212:  BCF    06.1
.................... } 
0213:  RETLW  00
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_d(0xFF);          // Set port d to input 
*
02C6:  MOVLW  FF
02C7:  BSF    03.5
02C8:  MOVWF  08
....................    output_high(GLCD_RW);      // Set for reading 
02C9:  BCF    06.4
02CA:  BCF    03.5
02CB:  BSF    06.4
....................  
....................    if(side)                   // Choose which side to write to 
02CC:  MOVF   5A,F
02CD:  BTFSC  03.2
02CE:  GOTO   2D4
....................       output_high(GLCD_CS2); 
02CF:  BSF    03.5
02D0:  BCF    06.1
02D1:  BCF    03.5
02D2:  BSF    06.1
....................    else 
02D3:  GOTO   2D8
....................       output_high(GLCD_CS1); 
02D4:  BSF    03.5
02D5:  BCF    06.0
02D6:  BCF    03.5
02D7:  BSF    06.0
....................  
....................    delay_cycles(1); 
02D8:  NOP
....................    output_high(GLCD_E);       // Pulse the enable pin 
02D9:  BSF    03.5
02DA:  BCF    06.5
02DB:  BCF    03.5
02DC:  BSF    06.5
....................    delay_cycles(4); 
02DD:  GOTO   2DE
02DE:  GOTO   2DF
....................    data = input_d();          // Get the data from the display's output register 
02DF:  MOVLW  FF
02E0:  BSF    03.5
02E1:  MOVWF  08
02E2:  BCF    03.5
02E3:  MOVF   08,W
02E4:  MOVWF  5B
....................    output_low(GLCD_E); 
02E5:  BSF    03.5
02E6:  BCF    06.5
02E7:  BCF    03.5
02E8:  BCF    06.5
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
02E9:  BSF    03.5
02EA:  BCF    06.0
02EB:  BCF    03.5
02EC:  BCF    06.0
....................    output_low(GLCD_CS2); 
02ED:  BSF    03.5
02EE:  BCF    06.1
02EF:  BCF    03.5
02F0:  BCF    06.1
....................    return data;               // Return the read data 
02F1:  MOVF   5B,W
02F2:  MOVWF  78
.................... } 
02F3:  RETLW  00
....................  
.................... #endif 
....................  
.................... #include <graphics.c>  // graphics.c dosyasý programa ekleniyor 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(int16 x1, int16 y1, int16 x2, int16 y2, int1 color) 
.................... #else 
.................... void glcd_line(int8 x1, int8 y1, int8 x2, int8 y2, int1 color) 
.................... #endif 
.................... { 
....................    int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
*
0454:  MOVLW  01
0455:  MOVWF  4B
0456:  MOVWF  4C
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
0457:  CLRF   51
....................    dx = abs((signed int8)(x2 - x1)); 
0458:  MOVF   42,W
0459:  SUBWF  44,W
045A:  MOVWF  52
045B:  MOVF   52,W
045C:  BTFSS  52.7
045D:  GOTO   460
045E:  MOVF   52,W
045F:  SUBLW  00
0460:  CLRF   7A
0461:  MOVWF  49
0462:  MOVF   7A,W
0463:  MOVWF  4A
....................    dy = abs((signed int8)(y2 - y1)); 
0464:  MOVF   43,W
0465:  SUBWF  45,W
0466:  MOVWF  52
0467:  MOVF   52,W
0468:  BTFSS  52.7
0469:  GOTO   46C
046A:  MOVF   52,W
046B:  SUBLW  00
046C:  CLRF   7A
046D:  MOVWF  47
046E:  MOVF   7A,W
046F:  MOVWF  48
....................    #endif 
....................  
....................    if(x1 > x2) 
0470:  MOVF   42,W
0471:  SUBWF  44,W
0472:  BTFSC  03.0
0473:  GOTO   476
....................       addx = -1; 
0474:  MOVLW  FF
0475:  MOVWF  4B
....................    if(y1 > y2) 
0476:  MOVF   43,W
0477:  SUBWF  45,W
0478:  BTFSC  03.0
0479:  GOTO   47C
....................       addy = -1; 
047A:  MOVLW  FF
047B:  MOVWF  4C
....................  
....................    if(dx >= dy) 
047C:  MOVF   48,W
047D:  SUBWF  4A,W
047E:  BTFSS  03.0
047F:  GOTO   4C8
0480:  BTFSS  03.2
0481:  GOTO   486
0482:  MOVF   47,W
0483:  SUBWF  49,W
0484:  BTFSS  03.0
0485:  GOTO   4C8
....................    { 
....................       dy *= 2; 
0486:  BCF    03.0
0487:  RLF    47,F
0488:  RLF    48,F
....................       P = dy - dx; 
0489:  MOVF   49,W
048A:  SUBWF  47,W
048B:  MOVWF  77
048C:  MOVF   48,W
048D:  MOVWF  7A
048E:  MOVF   4A,W
048F:  BTFSS  03.0
0490:  INCFSZ 4A,W
0491:  SUBWF  7A,F
0492:  MOVF   77,W
0493:  MOVWF  4D
0494:  MOVF   7A,W
0495:  MOVWF  4E
....................       diff = P - dx; 
0496:  MOVF   49,W
0497:  SUBWF  4D,W
0498:  MOVWF  4F
0499:  MOVF   4E,W
049A:  MOVWF  50
049B:  MOVF   4A,W
049C:  BTFSS  03.0
049D:  INCFSZ 4A,W
049E:  SUBWF  50,F
....................  
....................       for(; i<=dx; ++i) 
049F:  MOVF   4A,F
04A0:  BTFSS  03.2
04A1:  GOTO   4A6
04A2:  MOVF   51,W
04A3:  SUBWF  49,W
04A4:  BTFSS  03.0
04A5:  GOTO   4C7
....................       { 
....................          glcd_pixel(x1, y1, color); 
04A6:  MOVF   42,W
04A7:  MOVWF  54
04A8:  MOVF   43,W
04A9:  MOVWF  55
04AA:  MOVF   46,W
04AB:  MOVWF  56
04AC:  CALL   2F4
....................  
....................          if(P < 0) 
04AD:  BTFSS  4E.7
04AE:  GOTO   4B9
....................          { 
....................             P  += dy; 
04AF:  MOVF   47,W
04B0:  ADDWF  4D,F
04B1:  MOVF   48,W
04B2:  BTFSC  03.0
04B3:  INCFSZ 48,W
04B4:  ADDWF  4E,F
....................             x1 += addx; 
04B5:  MOVF   4B,W
04B6:  ADDWF  42,W
04B7:  MOVWF  42
....................          } 
....................          else 
04B8:  GOTO   4C5
....................          { 
....................             P  += diff; 
04B9:  MOVF   4F,W
04BA:  ADDWF  4D,F
04BB:  MOVF   50,W
04BC:  BTFSC  03.0
04BD:  INCFSZ 50,W
04BE:  ADDWF  4E,F
....................             x1 += addx; 
04BF:  MOVF   4B,W
04C0:  ADDWF  42,W
04C1:  MOVWF  42
....................             y1 += addy; 
04C2:  MOVF   4C,W
04C3:  ADDWF  43,W
04C4:  MOVWF  43
....................          } 
....................       } 
04C5:  INCF   51,F
04C6:  GOTO   49F
....................    } 
....................    else 
04C7:  GOTO   509
....................    { 
....................       dx *= 2; 
04C8:  BCF    03.0
04C9:  RLF    49,F
04CA:  RLF    4A,F
....................       P = dx - dy; 
04CB:  MOVF   47,W
04CC:  SUBWF  49,W
04CD:  MOVWF  77
04CE:  MOVF   4A,W
04CF:  MOVWF  7A
04D0:  MOVF   48,W
04D1:  BTFSS  03.0
04D2:  INCFSZ 48,W
04D3:  SUBWF  7A,F
04D4:  MOVF   77,W
04D5:  MOVWF  4D
04D6:  MOVF   7A,W
04D7:  MOVWF  4E
....................       diff = P - dy; 
04D8:  MOVF   47,W
04D9:  SUBWF  4D,W
04DA:  MOVWF  4F
04DB:  MOVF   4E,W
04DC:  MOVWF  50
04DD:  MOVF   48,W
04DE:  BTFSS  03.0
04DF:  INCFSZ 48,W
04E0:  SUBWF  50,F
....................  
....................       for(; i<=dy; ++i) 
04E1:  MOVF   48,F
04E2:  BTFSS  03.2
04E3:  GOTO   4E8
04E4:  MOVF   51,W
04E5:  SUBWF  47,W
04E6:  BTFSS  03.0
04E7:  GOTO   509
....................       { 
....................          glcd_pixel(x1, y1, color); 
04E8:  MOVF   42,W
04E9:  MOVWF  54
04EA:  MOVF   43,W
04EB:  MOVWF  55
04EC:  MOVF   46,W
04ED:  MOVWF  56
04EE:  CALL   2F4
....................  
....................          if(P < 0) 
04EF:  BTFSS  4E.7
04F0:  GOTO   4FB
....................          { 
....................             P  += dx; 
04F1:  MOVF   49,W
04F2:  ADDWF  4D,F
04F3:  MOVF   4A,W
04F4:  BTFSC  03.0
04F5:  INCFSZ 4A,W
04F6:  ADDWF  4E,F
....................             y1 += addy; 
04F7:  MOVF   4C,W
04F8:  ADDWF  43,W
04F9:  MOVWF  43
....................          } 
....................          else 
04FA:  GOTO   507
....................          { 
....................             P  += diff; 
04FB:  MOVF   4F,W
04FC:  ADDWF  4D,F
04FD:  MOVF   50,W
04FE:  BTFSC  03.0
04FF:  INCFSZ 50,W
0500:  ADDWF  4E,F
....................             x1 += addx; 
0501:  MOVF   4B,W
0502:  ADDWF  42,W
0503:  MOVWF  42
....................             y1 += addy; 
0504:  MOVF   4C,W
0505:  ADDWF  43,W
0506:  MOVWF  43
....................          } 
....................       } 
0507:  INCF   51,F
0508:  GOTO   4E1
....................    } 
.................... } 
0509:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(int16 x1, int16 y1, int16 x2, int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(int8 x1, int8 y1, int8 x2, int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
*
0800:  MOVF   3A,F
0801:  BTFSC  03.2
0802:  GOTO   035
....................    { 
....................       #ifdef LARGE_LCD 
....................       int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
0803:  MOVF   38,W
0804:  SUBWF  36,W
0805:  BTFSC  03.0
0806:  GOTO   00C
....................       { 
....................          xmin = x1; 
0807:  MOVF   36,W
0808:  MOVWF  3D
....................          xmax = x2; 
0809:  MOVF   38,W
080A:  MOVWF  3E
....................       } 
....................       else 
080B:  GOTO   010
....................       { 
....................          xmin = x2; 
080C:  MOVF   38,W
080D:  MOVWF  3D
....................          xmax = x1; 
080E:  MOVF   36,W
080F:  MOVWF  3E
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
0810:  MOVF   39,W
0811:  SUBWF  37,W
0812:  BTFSC  03.0
0813:  GOTO   019
....................       { 
....................          ymin = y1; 
0814:  MOVF   37,W
0815:  MOVWF  3F
....................          ymax = y2; 
0816:  MOVF   39,W
0817:  MOVWF  40
....................       } 
....................       else 
0818:  GOTO   01D
....................       { 
....................          ymin = y2; 
0819:  MOVF   39,W
081A:  MOVWF  3F
....................          ymax = y1; 
081B:  MOVF   37,W
081C:  MOVWF  40
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
081D:  MOVF   3D,W
081E:  SUBWF  3E,W
081F:  BTFSS  03.0
0820:  GOTO   034
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
0821:  MOVF   3F,W
0822:  MOVWF  3C
0823:  MOVF   3C,W
0824:  SUBWF  40,W
0825:  BTFSS  03.0
0826:  GOTO   032
....................          { 
....................             glcd_pixel(xmin, i, color); 
0827:  MOVF   3D,W
0828:  MOVWF  54
0829:  MOVF   3C,W
082A:  MOVWF  55
082B:  MOVF   3B,W
082C:  MOVWF  56
082D:  BCF    0A.3
082E:  CALL   2F4
082F:  BSF    0A.3
....................          } 
0830:  INCF   3C,F
0831:  GOTO   023
....................       } 
0832:  INCF   3D,F
0833:  GOTO   01D
....................    } 
....................    else 
0834:  GOTO   069
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
0835:  MOVF   36,W
0836:  MOVWF  42
0837:  MOVF   37,W
0838:  MOVWF  43
0839:  MOVF   38,W
083A:  MOVWF  44
083B:  MOVF   37,W
083C:  MOVWF  45
083D:  MOVF   3B,W
083E:  MOVWF  46
083F:  BCF    0A.3
0840:  CALL   454
0841:  BSF    0A.3
....................       glcd_line(x1, y2, x2, y2, color); 
0842:  MOVF   36,W
0843:  MOVWF  42
0844:  MOVF   39,W
0845:  MOVWF  43
0846:  MOVF   38,W
0847:  MOVWF  44
0848:  MOVF   39,W
0849:  MOVWF  45
084A:  MOVF   3B,W
084B:  MOVWF  46
084C:  BCF    0A.3
084D:  CALL   454
084E:  BSF    0A.3
....................       glcd_line(x1, y1, x1, y2, color); 
084F:  MOVF   36,W
0850:  MOVWF  42
0851:  MOVF   37,W
0852:  MOVWF  43
0853:  MOVF   36,W
0854:  MOVWF  44
0855:  MOVF   39,W
0856:  MOVWF  45
0857:  MOVF   3B,W
0858:  MOVWF  46
0859:  BCF    0A.3
085A:  CALL   454
085B:  BSF    0A.3
....................       glcd_line(x2, y1, x2, y2, color); 
085C:  MOVF   38,W
085D:  MOVWF  42
085E:  MOVF   37,W
085F:  MOVWF  43
0860:  MOVF   38,W
0861:  MOVWF  44
0862:  MOVF   39,W
0863:  MOVWF  45
0864:  MOVF   3B,W
0865:  MOVWF  46
0866:  BCF    0A.3
0867:  CALL   454
0868:  BSF    0A.3
....................    } 
.................... } 
0869:  BSF    0A.3
086A:  BCF    0A.4
086B:  GOTO   19A (RETURN)
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(int16 x1, int16 y1, int16 x2, int16 y2, int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(int8 x1, int8 y1, int8 x2, int8 y2, int8 width, int1 color) 
.................... #endif 
.................... { 
....................    int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
*
051F:  MOVLW  01
0520:  MOVWF  41
0521:  MOVWF  42
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
0522:  CLRF   4C
....................    dx = abs((signed int8)(x2 - x1)); 
0523:  MOVF   36,W
0524:  SUBWF  38,W
0525:  MOVWF  53
0526:  MOVF   53,W
0527:  BTFSS  53.7
0528:  GOTO   52B
0529:  MOVF   53,W
052A:  SUBLW  00
052B:  CLRF   7A
052C:  MOVWF  77
052D:  BTFSC  77.7
052E:  DECF   7A,F
052F:  MOVWF  3F
0530:  MOVF   7A,W
0531:  MOVWF  40
....................    dy = abs((signed int8)(y2 - y1)); 
0532:  MOVF   37,W
0533:  SUBWF  39,W
0534:  MOVWF  53
0535:  MOVF   53,W
0536:  BTFSS  53.7
0537:  GOTO   53A
0538:  MOVF   53,W
0539:  SUBLW  00
053A:  CLRF   7A
053B:  MOVWF  77
053C:  BTFSC  77.7
053D:  DECF   7A,F
053E:  MOVWF  3D
053F:  MOVF   7A,W
0540:  MOVWF  3E
....................    #endif 
....................  
....................    half_width = width/2; 
0541:  BCF    03.0
0542:  RRF    3A,W
0543:  MOVWF  3C
....................    c1 = -(dx*x1 + dy*y1); 
0544:  MOVF   40,W
0545:  MOVWF  58
0546:  MOVF   3F,W
0547:  MOVWF  57
0548:  CLRF   5A
0549:  MOVF   36,W
054A:  MOVWF  59
054B:  CALL   50A
054C:  MOVF   79,W
054D:  MOVWF  54
054E:  MOVF   78,W
054F:  MOVWF  53
0550:  MOVF   3E,W
0551:  MOVWF  58
0552:  MOVF   3D,W
0553:  MOVWF  57
0554:  CLRF   5A
0555:  MOVF   37,W
0556:  MOVWF  59
0557:  CALL   50A
0558:  MOVF   79,W
0559:  MOVWF  7A
055A:  MOVF   78,W
055B:  ADDWF  53,W
055C:  MOVWF  78
055D:  MOVF   54,W
055E:  BTFSC  03.0
055F:  INCFSZ 54,W
0560:  ADDWF  7A,F
0561:  MOVF   78,W
0562:  SUBLW  00
0563:  MOVWF  48
0564:  CLRF   49
0565:  MOVF   7A,W
0566:  BTFSS  03.0
0567:  INCFSZ 7A,W
0568:  SUBWF  49,F
....................    c2 = -(dx*x2 + dy*y2); 
0569:  MOVF   40,W
056A:  MOVWF  58
056B:  MOVF   3F,W
056C:  MOVWF  57
056D:  CLRF   5A
056E:  MOVF   38,W
056F:  MOVWF  59
0570:  CALL   50A
0571:  MOVF   79,W
0572:  MOVWF  54
0573:  MOVF   78,W
0574:  MOVWF  53
0575:  MOVF   3E,W
0576:  MOVWF  58
0577:  MOVF   3D,W
0578:  MOVWF  57
0579:  CLRF   5A
057A:  MOVF   39,W
057B:  MOVWF  59
057C:  CALL   50A
057D:  MOVF   79,W
057E:  MOVWF  7A
057F:  MOVF   78,W
0580:  ADDWF  53,W
0581:  MOVWF  78
0582:  MOVF   54,W
0583:  BTFSC  03.0
0584:  INCFSZ 54,W
0585:  ADDWF  7A,F
0586:  MOVF   78,W
0587:  SUBLW  00
0588:  MOVWF  4A
0589:  CLRF   4B
058A:  MOVF   7A,W
058B:  BTFSS  03.0
058C:  INCFSZ 7A,W
058D:  SUBWF  4B,F
....................  
....................    if(x1 > x2) 
058E:  MOVF   36,W
058F:  SUBWF  38,W
0590:  BTFSC  03.0
0591:  GOTO   5A0
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
0592:  MOVF   49,W
0593:  MOVWF  4E
0594:  MOVF   48,W
0595:  MOVWF  4D
....................       c1 = c2; 
0596:  MOVF   4B,W
0597:  MOVWF  49
0598:  MOVF   4A,W
0599:  MOVWF  48
....................       c2 = temp; 
059A:  MOVF   4E,W
059B:  MOVWF  4B
059C:  MOVF   4D,W
059D:  MOVWF  4A
....................       addx = -1; 
059E:  MOVLW  FF
059F:  MOVWF  41
....................    } 
....................    if(y1 > y2) 
05A0:  MOVF   37,W
05A1:  SUBWF  39,W
05A2:  BTFSC  03.0
05A3:  GOTO   5B2
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
05A4:  MOVF   49,W
05A5:  MOVWF  50
05A6:  MOVF   48,W
05A7:  MOVWF  4F
....................       c1 = c2; 
05A8:  MOVF   4B,W
05A9:  MOVWF  49
05AA:  MOVF   4A,W
05AB:  MOVWF  48
....................       c2 = temp; 
05AC:  MOVF   50,W
05AD:  MOVWF  4B
05AE:  MOVF   4F,W
05AF:  MOVWF  4A
....................       addy = -1; 
05B0:  MOVLW  FF
05B1:  MOVWF  42
....................    } 
....................  
....................    if(dx >= dy) 
05B2:  BTFSS  3E.7
05B3:  GOTO   5B7
05B4:  BTFSS  40.7
05B5:  GOTO   5C3
05B6:  GOTO   5B9
05B7:  BTFSC  40.7
05B8:  GOTO   663
05B9:  MOVF   3E,W
05BA:  SUBWF  40,W
05BB:  BTFSS  03.0
05BC:  GOTO   663
05BD:  BTFSS  03.2
05BE:  GOTO   5C3
05BF:  MOVF   3D,W
05C0:  SUBWF  3F,W
05C1:  BTFSS  03.0
05C2:  GOTO   663
....................    { 
....................       P = 2*dy - dx; 
05C3:  CLRF   58
05C4:  MOVLW  02
05C5:  MOVWF  57
05C6:  MOVF   3E,W
05C7:  MOVWF  5A
05C8:  MOVF   3D,W
05C9:  MOVWF  59
05CA:  CALL   50A
05CB:  MOVF   3F,W
05CC:  SUBWF  78,W
05CD:  MOVWF  44
05CE:  MOVF   79,W
05CF:  MOVWF  45
05D0:  MOVF   40,W
05D1:  BTFSS  03.0
05D2:  INCFSZ 40,W
05D3:  SUBWF  45,F
....................       diff = P - dx; 
05D4:  MOVF   3F,W
05D5:  SUBWF  44,W
05D6:  MOVWF  46
05D7:  MOVF   45,W
05D8:  MOVWF  47
05D9:  MOVF   40,W
05DA:  BTFSS  03.0
05DB:  INCFSZ 40,W
05DC:  SUBWF  47,F
....................  
....................       for(i=0; i<=dx; ++i) 
05DD:  CLRF   4C
05DE:  BTFSC  40.7
05DF:  GOTO   662
05E0:  MOVF   40,F
05E1:  BTFSS  03.2
05E2:  GOTO   5E7
05E3:  MOVF   4C,W
05E4:  SUBWF  3F,W
05E5:  BTFSS  03.0
05E6:  GOTO   662
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
05E7:  MOVF   3C,W
05E8:  SUBLW  00
05E9:  MOVWF  43
05EA:  MOVF   3A,W
05EB:  ANDLW  01
05EC:  ADDWF  3C,W
05ED:  BTFSC  43.7
05EE:  GOTO   5F2
05EF:  SUBWF  43,W
05F0:  BTFSC  03.0
05F1:  GOTO   640
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
05F2:  MOVF   40,W
05F3:  MOVWF  58
05F4:  MOVF   3F,W
05F5:  MOVWF  57
05F6:  CLRF   5A
05F7:  MOVF   36,W
05F8:  MOVWF  59
05F9:  CALL   50A
05FA:  MOVF   79,W
05FB:  MOVWF  54
05FC:  MOVF   78,W
05FD:  MOVWF  53
05FE:  MOVF   43,W
05FF:  ADDWF  37,W
0600:  CLRF   7A
0601:  MOVWF  77
0602:  BTFSC  77.7
0603:  DECF   7A,F
0604:  MOVWF  55
0605:  MOVF   7A,W
0606:  MOVWF  56
0607:  MOVF   3E,W
0608:  MOVWF  58
0609:  MOVF   3D,W
060A:  MOVWF  57
060B:  MOVF   7A,W
060C:  MOVWF  5A
060D:  MOVF   55,W
060E:  MOVWF  59
060F:  CALL   50A
0610:  MOVF   79,W
0611:  MOVWF  7A
0612:  MOVF   78,W
0613:  ADDWF  53,W
0614:  MOVWF  78
0615:  MOVF   54,W
0616:  BTFSC  03.0
0617:  INCFSZ 54,W
0618:  ADDWF  7A,F
0619:  MOVF   78,W
061A:  MOVWF  51
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
061B:  MOVF   51,W
061C:  ADDWF  48,W
061D:  MOVWF  53
061E:  MOVF   49,W
061F:  MOVWF  54
0620:  BTFSC  03.0
0621:  INCF   54,F
0622:  BTFSC  54.7
0623:  GOTO   63E
0624:  MOVF   51,W
0625:  ADDWF  4A,W
0626:  MOVWF  55
0627:  MOVF   4B,W
0628:  MOVWF  56
0629:  BTFSC  03.0
062A:  INCF   56,F
062B:  BTFSC  56.7
062C:  GOTO   634
062D:  MOVF   56,F
062E:  BTFSS  03.2
062F:  GOTO   63E
0630:  MOVF   55,W
0631:  SUBLW  00
0632:  BTFSS  03.0
0633:  GOTO   63E
....................                glcd_pixel(x1, y1+j, color); 
0634:  MOVF   43,W
0635:  ADDWF  37,W
0636:  MOVWF  53
0637:  MOVF   36,W
0638:  MOVWF  54
0639:  MOVF   53,W
063A:  MOVWF  55
063B:  MOVF   3B,W
063C:  MOVWF  56
063D:  CALL   2F4
....................          } 
063E:  INCF   43,F
063F:  GOTO   5EA
....................          if(P < 0) 
0640:  BTFSS  45.7
0641:  GOTO   654
....................          { 
....................             P  += 2*dy; 
0642:  CLRF   58
0643:  MOVLW  02
0644:  MOVWF  57
0645:  MOVF   3E,W
0646:  MOVWF  5A
0647:  MOVF   3D,W
0648:  MOVWF  59
0649:  CALL   50A
064A:  MOVF   78,W
064B:  ADDWF  44,F
064C:  MOVF   79,W
064D:  BTFSC  03.0
064E:  INCFSZ 79,W
064F:  ADDWF  45,F
....................             x1 += addx; 
0650:  MOVF   41,W
0651:  ADDWF  36,W
0652:  MOVWF  36
....................          } 
....................          else 
0653:  GOTO   660
....................          { 
....................             P  += diff; 
0654:  MOVF   46,W
0655:  ADDWF  44,F
0656:  MOVF   47,W
0657:  BTFSC  03.0
0658:  INCFSZ 47,W
0659:  ADDWF  45,F
....................             x1 += addx; 
065A:  MOVF   41,W
065B:  ADDWF  36,W
065C:  MOVWF  36
....................             y1 += addy; 
065D:  MOVF   42,W
065E:  ADDWF  37,W
065F:  MOVWF  37
....................          } 
....................       } 
0660:  INCF   4C,F
0661:  GOTO   5DE
....................    } 
....................    else 
0662:  GOTO   701
....................    { 
....................       P = 2*dx - dy; 
0663:  CLRF   58
0664:  MOVLW  02
0665:  MOVWF  57
0666:  MOVF   40,W
0667:  MOVWF  5A
0668:  MOVF   3F,W
0669:  MOVWF  59
066A:  CALL   50A
066B:  MOVF   3D,W
066C:  SUBWF  78,W
066D:  MOVWF  44
066E:  MOVF   79,W
066F:  MOVWF  45
0670:  MOVF   3E,W
0671:  BTFSS  03.0
0672:  INCFSZ 3E,W
0673:  SUBWF  45,F
....................       diff = P - dy; 
0674:  MOVF   3D,W
0675:  SUBWF  44,W
0676:  MOVWF  46
0677:  MOVF   45,W
0678:  MOVWF  47
0679:  MOVF   3E,W
067A:  BTFSS  03.0
067B:  INCFSZ 3E,W
067C:  SUBWF  47,F
....................  
....................       for(i=0; i<=dy; ++i) 
067D:  CLRF   4C
067E:  BTFSC  3E.7
067F:  GOTO   701
0680:  MOVF   3E,F
0681:  BTFSS  03.2
0682:  GOTO   687
0683:  MOVF   4C,W
0684:  SUBWF  3D,W
0685:  BTFSS  03.0
0686:  GOTO   701
....................       { 
....................          if(P < 0) 
0687:  BTFSS  45.7
0688:  GOTO   69B
....................          { 
....................             P  += 2*dx; 
0689:  CLRF   58
068A:  MOVLW  02
068B:  MOVWF  57
068C:  MOVF   40,W
068D:  MOVWF  5A
068E:  MOVF   3F,W
068F:  MOVWF  59
0690:  CALL   50A
0691:  MOVF   78,W
0692:  ADDWF  44,F
0693:  MOVF   79,W
0694:  BTFSC  03.0
0695:  INCFSZ 79,W
0696:  ADDWF  45,F
....................             y1 += addy; 
0697:  MOVF   42,W
0698:  ADDWF  37,W
0699:  MOVWF  37
....................          } 
....................          else 
069A:  GOTO   6A7
....................          { 
....................             P  += diff; 
069B:  MOVF   46,W
069C:  ADDWF  44,F
069D:  MOVF   47,W
069E:  BTFSC  03.0
069F:  INCFSZ 47,W
06A0:  ADDWF  45,F
....................             x1 += addx; 
06A1:  MOVF   41,W
06A2:  ADDWF  36,W
06A3:  MOVWF  36
....................             y1 += addy; 
06A4:  MOVF   42,W
06A5:  ADDWF  37,W
06A6:  MOVWF  37
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
06A7:  MOVF   3C,W
06A8:  SUBLW  00
06A9:  MOVWF  43
06AA:  MOVF   3A,W
06AB:  ANDLW  01
06AC:  ADDWF  3C,W
06AD:  BTFSC  43.7
06AE:  GOTO   6B2
06AF:  SUBWF  43,W
06B0:  BTFSC  03.0
06B1:  GOTO   6FF
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
06B2:  MOVF   40,W
06B3:  MOVWF  58
06B4:  MOVF   3F,W
06B5:  MOVWF  57
06B6:  CLRF   5A
06B7:  MOVF   36,W
06B8:  MOVWF  59
06B9:  CALL   50A
06BA:  MOVF   79,W
06BB:  MOVWF  54
06BC:  MOVF   78,W
06BD:  MOVWF  53
06BE:  MOVF   43,W
06BF:  ADDWF  37,W
06C0:  CLRF   7A
06C1:  MOVWF  77
06C2:  BTFSC  77.7
06C3:  DECF   7A,F
06C4:  MOVWF  55
06C5:  MOVF   7A,W
06C6:  MOVWF  56
06C7:  MOVF   3E,W
06C8:  MOVWF  58
06C9:  MOVF   3D,W
06CA:  MOVWF  57
06CB:  MOVF   7A,W
06CC:  MOVWF  5A
06CD:  MOVF   55,W
06CE:  MOVWF  59
06CF:  CALL   50A
06D0:  MOVF   79,W
06D1:  MOVWF  7A
06D2:  MOVF   78,W
06D3:  ADDWF  53,W
06D4:  MOVWF  78
06D5:  MOVF   54,W
06D6:  BTFSC  03.0
06D7:  INCFSZ 54,W
06D8:  ADDWF  7A,F
06D9:  MOVF   78,W
06DA:  MOVWF  52
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
06DB:  MOVF   52,W
06DC:  ADDWF  48,W
06DD:  MOVWF  53
06DE:  MOVF   49,W
06DF:  MOVWF  54
06E0:  BTFSC  03.0
06E1:  INCF   54,F
06E2:  BTFSC  54.7
06E3:  GOTO   6FD
06E4:  MOVF   52,W
06E5:  ADDWF  4A,W
06E6:  MOVWF  55
06E7:  MOVF   4B,W
06E8:  MOVWF  56
06E9:  BTFSC  03.0
06EA:  INCF   56,F
06EB:  BTFSC  56.7
06EC:  GOTO   6F4
06ED:  MOVF   56,F
06EE:  BTFSS  03.2
06EF:  GOTO   6FD
06F0:  MOVF   55,W
06F1:  SUBLW  00
06F2:  BTFSS  03.0
06F3:  GOTO   6FD
....................                glcd_pixel(x1+j, y1, color); 
06F4:  MOVF   43,W
06F5:  ADDWF  36,W
06F6:  MOVWF  53
06F7:  MOVWF  54
06F8:  MOVF   37,W
06F9:  MOVWF  55
06FA:  MOVF   3B,W
06FB:  MOVWF  56
06FC:  CALL   2F4
....................          } 
06FD:  INCF   43,F
06FE:  GOTO   6AA
....................       } 
06FF:  INCF   4C,F
0700:  GOTO   67E
....................    } 
.................... } 
0701:  BSF    0A.3
0702:  BCF    0A.4
0703:  GOTO   14B (RETURN)
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(int16 x, int16 y, int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(int8 x, int8 y, int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
0704:  CLRF   3B
....................    b = radius; 
0705:  MOVF   38,W
0706:  MOVWF  3C
....................    P = 1 - radius; 
0707:  MOVF   38,W
0708:  SUBLW  01
0709:  MOVWF  3D
....................  
....................    do 
....................    { 
....................       if(fill) 
070A:  MOVF   39,F
070B:  BTFSC  03.2
070C:  GOTO   76A
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
070D:  MOVF   3B,W
070E:  SUBWF  36,W
070F:  MOVWF  3E
0710:  MOVF   3C,W
0711:  ADDWF  37,W
0712:  MOVWF  3F
0713:  MOVF   3B,W
0714:  ADDWF  36,W
0715:  MOVWF  40
0716:  MOVF   3C,W
0717:  ADDWF  37,W
0718:  MOVWF  41
0719:  MOVF   3E,W
071A:  MOVWF  42
071B:  MOVF   3F,W
071C:  MOVWF  43
071D:  MOVF   40,W
071E:  MOVWF  44
071F:  MOVF   41,W
0720:  MOVWF  45
0721:  MOVF   3A,W
0722:  MOVWF  46
0723:  CALL   454
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
0724:  MOVF   3B,W
0725:  SUBWF  36,W
0726:  MOVWF  3E
0727:  MOVF   3C,W
0728:  SUBWF  37,W
0729:  MOVWF  3F
072A:  MOVF   3B,W
072B:  ADDWF  36,W
072C:  MOVWF  40
072D:  MOVF   3C,W
072E:  SUBWF  37,W
072F:  MOVWF  41
0730:  MOVF   3E,W
0731:  MOVWF  42
0732:  MOVF   3F,W
0733:  MOVWF  43
0734:  MOVF   40,W
0735:  MOVWF  44
0736:  MOVF   41,W
0737:  MOVWF  45
0738:  MOVF   3A,W
0739:  MOVWF  46
073A:  CALL   454
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
073B:  MOVF   3C,W
073C:  SUBWF  36,W
073D:  MOVWF  3E
073E:  MOVF   3B,W
073F:  ADDWF  37,W
0740:  MOVWF  3F
0741:  MOVF   3C,W
0742:  ADDWF  36,W
0743:  MOVWF  40
0744:  MOVF   3B,W
0745:  ADDWF  37,W
0746:  MOVWF  41
0747:  MOVF   3E,W
0748:  MOVWF  42
0749:  MOVF   3F,W
074A:  MOVWF  43
074B:  MOVF   40,W
074C:  MOVWF  44
074D:  MOVF   41,W
074E:  MOVWF  45
074F:  MOVF   3A,W
0750:  MOVWF  46
0751:  CALL   454
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
0752:  MOVF   3C,W
0753:  SUBWF  36,W
0754:  MOVWF  3E
0755:  MOVF   3B,W
0756:  SUBWF  37,W
0757:  MOVWF  3F
0758:  MOVF   3C,W
0759:  ADDWF  36,W
075A:  MOVWF  40
075B:  MOVF   3B,W
075C:  SUBWF  37,W
075D:  MOVWF  41
075E:  MOVF   3E,W
075F:  MOVWF  42
0760:  MOVF   3F,W
0761:  MOVWF  43
0762:  MOVF   40,W
0763:  MOVWF  44
0764:  MOVF   41,W
0765:  MOVWF  45
0766:  MOVF   3A,W
0767:  MOVWF  46
0768:  CALL   454
....................       } 
....................       else 
0769:  GOTO   7D2
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
076A:  MOVF   36,W
076B:  ADDWF  3B,W
076C:  MOVWF  3E
076D:  MOVF   37,W
076E:  ADDWF  3C,W
076F:  MOVWF  3F
0770:  MOVF   3E,W
0771:  MOVWF  54
0772:  MOVF   3F,W
0773:  MOVWF  55
0774:  MOVF   3A,W
0775:  MOVWF  56
0776:  CALL   2F4
....................          glcd_pixel(b+x, a+y, color); 
0777:  MOVF   36,W
0778:  ADDWF  3C,W
0779:  MOVWF  3E
077A:  MOVF   37,W
077B:  ADDWF  3B,W
077C:  MOVWF  3F
077D:  MOVF   3E,W
077E:  MOVWF  54
077F:  MOVF   3F,W
0780:  MOVWF  55
0781:  MOVF   3A,W
0782:  MOVWF  56
0783:  CALL   2F4
....................          glcd_pixel(x-a, b+y, color); 
0784:  MOVF   3B,W
0785:  SUBWF  36,W
0786:  MOVWF  3E
0787:  MOVF   37,W
0788:  ADDWF  3C,W
0789:  MOVWF  3F
078A:  MOVF   3E,W
078B:  MOVWF  54
078C:  MOVF   3F,W
078D:  MOVWF  55
078E:  MOVF   3A,W
078F:  MOVWF  56
0790:  CALL   2F4
....................          glcd_pixel(x-b, a+y, color); 
0791:  MOVF   3C,W
0792:  SUBWF  36,W
0793:  MOVWF  3E
0794:  MOVF   37,W
0795:  ADDWF  3B,W
0796:  MOVWF  3F
0797:  MOVF   3E,W
0798:  MOVWF  54
0799:  MOVF   3F,W
079A:  MOVWF  55
079B:  MOVF   3A,W
079C:  MOVWF  56
079D:  CALL   2F4
....................          glcd_pixel(b+x, y-a, color); 
079E:  MOVF   36,W
079F:  ADDWF  3C,W
07A0:  MOVWF  3E
07A1:  MOVF   3B,W
07A2:  SUBWF  37,W
07A3:  MOVWF  3F
07A4:  MOVF   3E,W
07A5:  MOVWF  54
07A6:  MOVF   3F,W
07A7:  MOVWF  55
07A8:  MOVF   3A,W
07A9:  MOVWF  56
07AA:  CALL   2F4
....................          glcd_pixel(a+x, y-b, color); 
07AB:  MOVF   36,W
07AC:  ADDWF  3B,W
07AD:  MOVWF  3E
07AE:  MOVF   3C,W
07AF:  SUBWF  37,W
07B0:  MOVWF  3F
07B1:  MOVF   3E,W
07B2:  MOVWF  54
07B3:  MOVF   3F,W
07B4:  MOVWF  55
07B5:  MOVF   3A,W
07B6:  MOVWF  56
07B7:  CALL   2F4
....................          glcd_pixel(x-a, y-b, color); 
07B8:  MOVF   3B,W
07B9:  SUBWF  36,W
07BA:  MOVWF  3E
07BB:  MOVF   3C,W
07BC:  SUBWF  37,W
07BD:  MOVWF  3F
07BE:  MOVF   3E,W
07BF:  MOVWF  54
07C0:  MOVF   3F,W
07C1:  MOVWF  55
07C2:  MOVF   3A,W
07C3:  MOVWF  56
07C4:  CALL   2F4
....................          glcd_pixel(x-b, y-a, color); 
07C5:  MOVF   3C,W
07C6:  SUBWF  36,W
07C7:  MOVWF  3E
07C8:  MOVF   3B,W
07C9:  SUBWF  37,W
07CA:  MOVWF  3F
07CB:  MOVF   3E,W
07CC:  MOVWF  54
07CD:  MOVF   3F,W
07CE:  MOVWF  55
07CF:  MOVF   3A,W
07D0:  MOVWF  56
07D1:  CALL   2F4
....................       } 
....................  
....................       if(P < 0) 
07D2:  BTFSS  3D.7
07D3:  GOTO   7E0
....................          P += 3 + 2 * a++; 
07D4:  MOVF   3B,W
07D5:  INCF   3B,F
07D6:  MOVWF  3E
07D7:  MOVLW  02
07D8:  MOVWF  48
07D9:  MOVF   3E,W
07DA:  MOVWF  49
07DB:  CALL   214
07DC:  MOVF   78,W
07DD:  ADDLW  03
07DE:  ADDWF  3D,F
....................       else 
07DF:  GOTO   7EF
....................          P += 5 + 2 * (a++ - b--); 
07E0:  MOVF   3B,W
07E1:  INCF   3B,F
07E2:  MOVWF  3E
07E3:  MOVF   3C,W
07E4:  DECF   3C,F
07E5:  SUBWF  3E,W
07E6:  MOVWF  3F
07E7:  MOVLW  02
07E8:  MOVWF  48
07E9:  MOVF   3F,W
07EA:  MOVWF  49
07EB:  CALL   214
07EC:  MOVF   78,W
07ED:  ADDLW  05
07EE:  ADDWF  3D,F
....................     } while(a <= b); 
07EF:  MOVF   3B,W
07F0:  XORLW  80
07F1:  MOVWF  77
07F2:  MOVF   3C,W
07F3:  XORLW  80
07F4:  SUBWF  77,W
07F5:  BTFSC  03.2
07F6:  GOTO   70A
07F7:  BTFSS  03.0
07F8:  GOTO   70A
.................... } 
07F9:  BSF    0A.3
07FA:  BCF    0A.4
07FB:  GOTO   170 (RETURN)
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(int16 x, int16 y, char* textptr, int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(int8 x, int8 y, char* textptr, int8 size, int1 color) 
.................... #endif 
.................... { 
....................    int8 j, k, l, m;                       // Loop counters 
....................    int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
036A:  MOVF   39,W
036B:  MOVWF  7A
036C:  MOVF   38,W
036D:  MOVWF  04
036E:  BCF    03.7
036F:  BTFSC  7A.0
0370:  BSF    03.7
0371:  MOVF   00,F
0372:  BTFSC  03.2
0373:  GOTO   43F
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
0374:  MOVF   39,W
0375:  MOVWF  7A
0376:  MOVF   38,W
0377:  MOVWF  04
0378:  BCF    03.7
0379:  BTFSC  7A.0
037A:  BSF    03.7
037B:  MOVF   00,W
037C:  SUBLW  52
037D:  BTFSS  03.0
037E:  GOTO   39D
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
037F:  MOVF   39,W
0380:  MOVWF  7A
0381:  MOVF   38,W
0382:  MOVWF  04
0383:  BCF    03.7
0384:  BTFSC  7A.0
0385:  BSF    03.7
0386:  MOVLW  20
0387:  SUBWF  00,W
0388:  MOVWF  47
0389:  MOVWF  48
038A:  MOVLW  05
038B:  MOVWF  49
038C:  CALL   214
038D:  MOVF   78,W
038E:  MOVWF  48
038F:  MOVWF  79
0390:  MOVLW  05
0391:  MOVWF  78
0392:  MOVLW  40
0393:  MOVWF  04
0394:  BCF    03.7
0395:  MOVF   79,W
0396:  CALL   004
0397:  MOVWF  00
0398:  INCF   79,F
0399:  INCF   04,F
039A:  DECFSZ 78,F
039B:  GOTO   395
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
039C:  GOTO   3CB
039D:  MOVF   39,W
039E:  MOVWF  7A
039F:  MOVF   38,W
03A0:  MOVWF  04
03A1:  BCF    03.7
03A2:  BTFSC  7A.0
03A3:  BSF    03.7
03A4:  MOVF   00,W
03A5:  SUBLW  7E
03A6:  BTFSS  03.0
03A7:  GOTO   3C6
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
03A8:  MOVF   39,W
03A9:  MOVWF  7A
03AA:  MOVF   38,W
03AB:  MOVWF  04
03AC:  BCF    03.7
03AD:  BTFSC  7A.0
03AE:  BSF    03.7
03AF:  MOVLW  53
03B0:  SUBWF  00,W
03B1:  MOVWF  47
03B2:  MOVWF  48
03B3:  MOVLW  05
03B4:  MOVWF  49
03B5:  CALL   214
03B6:  MOVF   78,W
03B7:  MOVWF  48
03B8:  MOVWF  79
03B9:  MOVLW  05
03BA:  MOVWF  78
03BB:  MOVLW  40
03BC:  MOVWF  04
03BD:  BCF    03.7
03BE:  MOVF   79,W
03BF:  CALL   10A
03C0:  MOVWF  00
03C1:  INCF   79,F
03C2:  INCF   04,F
03C3:  DECFSZ 78,F
03C4:  GOTO   3BE
....................       else 
03C5:  GOTO   3CB
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
03C6:  CLRF   40
03C7:  CLRF   41
03C8:  CLRF   42
03C9:  CLRF   43
03CA:  CLRF   44
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
03CB:  MOVF   39,W
03CC:  MOVWF  7A
03CD:  MOVF   38,W
03CE:  MOVWF  04
03CF:  BCF    03.7
03D0:  BTFSC  7A.0
03D1:  BSF    03.7
03D2:  MOVF   00,W
03D3:  XORLW  0A
03D4:  BTFSC  03.2
03D5:  GOTO   3DA
03D6:  XORLW  07
03D7:  BTFSC  03.2
03D8:  GOTO   3E3
03D9:  GOTO   3E5
....................          case '\n': 
....................             y += 7*size + 1; 
03DA:  MOVLW  07
03DB:  MOVWF  48
03DC:  MOVF   3A,W
03DD:  MOVWF  49
03DE:  CALL   214
03DF:  MOVLW  01
03E0:  ADDWF  78,W
03E1:  ADDWF  37,F
....................             continue; 
03E2:  GOTO   43A
....................          case '\r': 
....................             x = 0; 
03E3:  CLRF   36
....................             continue; 
03E4:  GOTO   43A
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
03E5:  MOVLW  05
03E6:  MOVWF  48
03E7:  MOVF   3A,W
03E8:  MOVWF  49
03E9:  CALL   214
03EA:  MOVF   78,W
03EB:  ADDWF  36,W
03EC:  SUBLW  7F
03ED:  BTFSC  03.0
03EE:  GOTO   3F8
....................       { 
....................          x = 0;                           // Set x at far left position 
03EF:  CLRF   36
....................          y += 7*size + 1;                 // Set y at next position down 
03F0:  MOVLW  07
03F1:  MOVWF  48
03F2:  MOVF   3A,W
03F3:  MOVWF  49
03F4:  CALL   214
03F5:  MOVLW  01
03F6:  ADDWF  78,W
03F7:  ADDWF  37,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
03F8:  CLRF   3C
03F9:  MOVF   3C,W
03FA:  SUBLW  04
03FB:  BTFSS  03.0
03FC:  GOTO   43A
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
03FD:  CLRF   3D
03FE:  MOVF   3D,W
03FF:  SUBLW  06
0400:  BTFSS  03.0
0401:  GOTO   436
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
0402:  MOVLW  40
0403:  ADDWF  3C,W
0404:  MOVWF  04
0405:  BCF    03.7
0406:  MOVF   00,W
0407:  MOVWF  45
0408:  MOVWF  77
0409:  MOVF   3D,W
040A:  MOVWF  78
040B:  BTFSC  03.2
040C:  GOTO   411
040D:  BCF    03.0
040E:  RRF    77,F
040F:  DECFSZ 78,F
0410:  GOTO   40D
0411:  BTFSS  77.0
0412:  GOTO   434
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
0413:  CLRF   3E
0414:  MOVF   3A,W
0415:  SUBWF  3E,W
0416:  BTFSC  03.0
0417:  GOTO   434
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
0418:  CLRF   3F
0419:  MOVF   3A,W
041A:  SUBWF  3F,W
041B:  BTFSC  03.0
041C:  GOTO   432
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
041D:  MOVF   3F,W
041E:  ADDWF  36,W
041F:  MOVWF  45
0420:  MOVF   3D,W
0421:  MOVWF  48
0422:  MOVF   3A,W
0423:  MOVWF  49
0424:  CALL   214
0425:  MOVF   78,W
0426:  ADDWF  37,W
0427:  ADDWF  3E,W
0428:  MOVWF  47
0429:  MOVF   45,W
042A:  MOVWF  54
042B:  MOVF   47,W
042C:  MOVWF  55
042D:  MOVF   3B,W
042E:  MOVWF  56
042F:  CALL   2F4
....................                   } 
0430:  INCF   3F,F
0431:  GOTO   419
....................                } 
0432:  INCF   3E,F
0433:  GOTO   414
....................             } 
....................          } 
0434:  INCF   3D,F
0435:  GOTO   3FE
....................       } 
0436:  INCF   3C,F
0437:  MOVF   3A,W
0438:  ADDWF  36,F
0439:  GOTO   3F9
....................    } 
043A:  INCF   38,F
043B:  BTFSC  03.2
043C:  INCF   39,F
043D:  INCF   36,F
043E:  GOTO   36A
.................... } 
043F:  RETLW  00
....................  
.................... #endif 
....................  
....................  
.................... char yazi1[]="GAZI";        // Karakter dizisi tanýmlanýyor 
*
0878:  MOVLW  47
0879:  MOVWF  21
087A:  MOVLW  41
087B:  MOVWF  22
087C:  MOVLW  5A
087D:  MOVWF  23
087E:  MOVLW  49
087F:  MOVWF  24
0880:  CLRF   25
.................... char yazi2[]="UNIVERSITY";  // Karakter dizisi tanýmlanýyor 
0881:  MOVLW  55
0882:  MOVWF  26
0883:  MOVLW  4E
0884:  MOVWF  27
0885:  MOVLW  49
0886:  MOVWF  28
0887:  MOVLW  56
0888:  MOVWF  29
0889:  MOVLW  45
088A:  MOVWF  2A
088B:  MOVLW  52
088C:  MOVWF  2B
088D:  MOVLW  53
088E:  MOVWF  2C
088F:  MOVLW  49
0890:  MOVWF  2D
0891:  MOVLW  54
0892:  MOVWF  2E
0893:  MOVLW  59
0894:  MOVWF  2F
0895:  CLRF   30
.................... int i,x1,y1,x2,y2; 
....................  
.................... /********* ANA PROGRAM FONKSÝYONU********/ 
....................  
.................... void main ( ) 
.................... { 
*
086C:  CLRF   04
086D:  BCF    03.7
086E:  MOVLW  1F
086F:  ANDWF  03,F
0870:  BSF    03.5
0871:  BSF    1F.0
0872:  BSF    1F.1
0873:  BSF    1F.2
0874:  BCF    1F.3
....................    setup_psp(PSP_DISABLED);        // PSP birimi devre dýþý 
*
0896:  BSF    03.5
0897:  BCF    09.4
....................    setup_timer_1(T1_DISABLED);     // T1 zamanlayýcýsý devre dýþý 
0898:  BCF    03.5
0899:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); // T2 zamanlayýcýsý devre dýþý 
089A:  MOVLW  00
089B:  MOVWF  78
089C:  MOVWF  12
089D:  MOVLW  00
089E:  BSF    03.5
089F:  MOVWF  12
....................    setup_adc_ports(NO_ANALOGS);    // ANALOG giriþ yok 
08A0:  BSF    1F.0
08A1:  BSF    1F.1
08A2:  BSF    1F.2
08A3:  BCF    1F.3
....................    setup_adc(ADC_OFF);             // ADC birimi devre dýþý 
08A4:  BCF    03.5
08A5:  BCF    1F.0
....................    setup_CCP1(CCP_OFF);            // CCP1 birimi devre dýþý 
08A6:  BSF    20.2
08A7:  MOVF   20,W
08A8:  BSF    03.5
08A9:  MOVWF  07
08AA:  BCF    03.5
08AB:  CLRF   17
....................    setup_CCP2(CCP_OFF);            // CCP2 birimi devre dýþý 
08AC:  BSF    20.1
08AD:  MOVF   20,W
08AE:  BSF    03.5
08AF:  MOVWF  07
08B0:  BCF    03.5
08B1:  CLRF   1D
....................  
....................    glcd_init(ON); // Grafik LCD hazýrlanýyor ve ekran siliniyor 
08B2:  MOVLW  01
08B3:  MOVWF  36
08B4:  BCF    0A.3
08B5:  CALL   239
08B6:  BSF    0A.3
....................  
....................    while(1) 
....................    { 
....................       glcd_init(ON); // Ekran siliniyor 
08B7:  MOVLW  01
08B8:  MOVWF  36
08B9:  BCF    0A.3
08BA:  CALL   239
08BB:  BSF    0A.3
....................       glcd_text57(39, 5, yazi1, 2, ON);  // GLCD'de yazý yazdýrýlýyor 
08BC:  MOVLW  27
08BD:  MOVWF  36
08BE:  MOVLW  05
08BF:  MOVWF  37
08C0:  CLRF   39
08C1:  MOVLW  21
08C2:  MOVWF  38
08C3:  MOVLW  02
08C4:  MOVWF  3A
08C5:  MOVLW  01
08C6:  MOVWF  3B
08C7:  BCF    0A.3
08C8:  CALL   36A
08C9:  BSF    0A.3
....................       glcd_text57(5, 30, yazi2, 2, ON);  // GLCD'de yazý yazdýrýlýyor 
08CA:  MOVLW  05
08CB:  MOVWF  36
08CC:  MOVLW  1E
08CD:  MOVWF  37
08CE:  CLRF   39
08CF:  MOVLW  26
08D0:  MOVWF  38
08D1:  MOVLW  02
08D2:  MOVWF  3A
08D3:  MOVLW  01
08D4:  MOVWF  3B
08D5:  BCF    0A.3
08D6:  CALL   36A
08D7:  BSF    0A.3
....................       delay_ms(2000); 
08D8:  MOVLW  08
08D9:  MOVWF  36
08DA:  MOVLW  FA
08DB:  MOVWF  37
08DC:  BCF    0A.3
08DD:  CALL   440
08DE:  BSF    0A.3
08DF:  DECFSZ 36,F
08E0:  GOTO   0DA
....................  
....................       glcd_init(ON); // Ekran siliniyor 
08E1:  MOVLW  01
08E2:  MOVWF  36
08E3:  BCF    0A.3
08E4:  CALL   239
08E5:  BSF    0A.3
....................       x1=5; 
08E6:  MOVLW  05
08E7:  MOVWF  32
....................       y1=5; 
08E8:  MOVWF  33
....................       x2=100; 
08E9:  MOVLW  64
08EA:  MOVWF  34
....................       y2=5; 
08EB:  MOVLW  05
08EC:  MOVWF  35
....................       for(i=0;i<6;i++) 
08ED:  CLRF   31
08EE:  MOVF   31,W
08EF:  SUBLW  05
08F0:  BTFSS  03.0
08F1:  GOTO   110
....................       { 
....................          glcd_line(x1, y1, x2, y2, ON); // GLCD'de Çizgi çizdiriliyor 
08F2:  MOVF   32,W
08F3:  MOVWF  42
08F4:  MOVF   33,W
08F5:  MOVWF  43
08F6:  MOVF   34,W
08F7:  MOVWF  44
08F8:  MOVF   35,W
08F9:  MOVWF  45
08FA:  MOVLW  01
08FB:  MOVWF  46
08FC:  BCF    0A.3
08FD:  CALL   454
08FE:  BSF    0A.3
....................          y2=y1+=10; // y2=y1=y2+10; anlamýnda 
08FF:  MOVLW  0A
0900:  ADDWF  33,F
0901:  MOVF   33,W
0902:  MOVWF  35
....................          x2-=10;    // x2=x2-10; anlamýnda 
0903:  MOVLW  0A
0904:  SUBWF  34,F
....................          delay_ms(1000); 
0905:  MOVLW  04
0906:  MOVWF  36
0907:  MOVLW  FA
0908:  MOVWF  37
0909:  BCF    0A.3
090A:  CALL   440
090B:  BSF    0A.3
090C:  DECFSZ 36,F
090D:  GOTO   107
....................       } 
090E:  INCF   31,F
090F:  GOTO   0EE
....................  
....................       glcd_init(ON); // Ekran siliniyor 
0910:  MOVLW  01
0911:  MOVWF  36
0912:  BCF    0A.3
0913:  CALL   239
0914:  BSF    0A.3
....................       x1=y1=10; 
0915:  MOVLW  0A
0916:  MOVWF  33
0917:  MOVWF  32
....................       for (i=0;i<120;i++) 
0918:  CLRF   31
0919:  MOVF   31,W
091A:  SUBLW  77
091B:  BTFSS  03.0
091C:  GOTO   130
....................       { 
....................          glcd_pixel(x1,y1,ON); // Ekranda istenen pikseller aktif yapýlýyor 
091D:  MOVF   32,W
091E:  MOVWF  54
091F:  MOVF   33,W
0920:  MOVWF  55
0921:  MOVLW  01
0922:  MOVWF  56
0923:  BCF    0A.3
0924:  CALL   2F4
0925:  BSF    0A.3
....................          y1=x1++;   // y1=x1+1; anlamýnda 
0926:  MOVF   32,W
0927:  INCF   32,F
0928:  MOVWF  33
....................          delay_ms(50); 
0929:  MOVLW  32
092A:  MOVWF  37
092B:  BCF    0A.3
092C:  CALL   440
092D:  BSF    0A.3
....................       } 
092E:  INCF   31,F
092F:  GOTO   119
....................  
....................       glcd_init(ON); // Ekran siliniyor 
0930:  MOVLW  01
0931:  MOVWF  36
0932:  BCF    0A.3
0933:  CALL   239
0934:  BSF    0A.3
....................       y2=60; 
0935:  MOVLW  3C
0936:  MOVWF  35
....................       x1=5; 
0937:  MOVLW  05
0938:  MOVWF  32
....................       for (i=0;i<8;i++) 
0939:  CLRF   31
093A:  MOVF   31,W
093B:  SUBLW  07
093C:  BTFSS  03.0
093D:  GOTO   15B
....................       { 
....................          glcd_bar(x1, 0, x1, y2, 10, ON); // GLCD'de çubuk çizdiriliyor 
093E:  MOVF   32,W
093F:  MOVWF  36
0940:  CLRF   37
0941:  MOVF   32,W
0942:  MOVWF  38
0943:  MOVF   35,W
0944:  MOVWF  39
0945:  MOVLW  0A
0946:  MOVWF  3A
0947:  MOVLW  01
0948:  MOVWF  3B
0949:  BCF    0A.3
094A:  GOTO   51F
094B:  BSF    0A.3
....................          delay_ms(1000); 
094C:  MOVLW  04
094D:  MOVWF  36
094E:  MOVLW  FA
094F:  MOVWF  37
0950:  BCF    0A.3
0951:  CALL   440
0952:  BSF    0A.3
0953:  DECFSZ 36,F
0954:  GOTO   14E
....................          x1+=15; // x1=x1+15; anlamýnda 
0955:  MOVLW  0F
0956:  ADDWF  32,F
....................          y2-=5;  // y2=y2-5; anlamýnda 
0957:  MOVLW  05
0958:  SUBWF  35,F
....................       } 
0959:  INCF   31,F
095A:  GOTO   13A
....................  
....................       glcd_init(ON); // Ekran siliniyor 
095B:  MOVLW  01
095C:  MOVWF  36
095D:  BCF    0A.3
095E:  CALL   239
095F:  BSF    0A.3
....................       for(i=0;i<=30;i=i+5) 
0960:  CLRF   31
0961:  MOVF   31,W
0962:  SUBLW  1E
0963:  BTFSS  03.0
0964:  GOTO   17D
....................       { 
....................          glcd_circle(60, 30, i, NO, ON); // GLCD'de Daire çizdiriliyor 
0965:  MOVLW  3C
0966:  MOVWF  36
0967:  MOVLW  1E
0968:  MOVWF  37
0969:  MOVF   31,W
096A:  MOVWF  38
096B:  CLRF   39
096C:  MOVLW  01
096D:  MOVWF  3A
096E:  BCF    0A.3
096F:  GOTO   704
0970:  BSF    0A.3
....................          delay_ms(1000); 
0971:  MOVLW  04
0972:  MOVWF  36
0973:  MOVLW  FA
0974:  MOVWF  37
0975:  BCF    0A.3
0976:  CALL   440
0977:  BSF    0A.3
0978:  DECFSZ 36,F
0979:  GOTO   173
....................       } 
097A:  MOVLW  05
097B:  ADDWF  31,F
097C:  GOTO   161
....................  
....................       glcd_init(ON); // Ekran siliniyor 
097D:  MOVLW  01
097E:  MOVWF  36
097F:  BCF    0A.3
0980:  CALL   239
0981:  BSF    0A.3
....................       x1=5; 
0982:  MOVLW  05
0983:  MOVWF  32
....................       y1=5; 
0984:  MOVWF  33
....................       x2=120; 
0985:  MOVLW  78
0986:  MOVWF  34
....................       y2=63; 
0987:  MOVLW  3F
0988:  MOVWF  35
....................       for(i=0;i<6;i++) 
0989:  CLRF   31
098A:  MOVF   31,W
098B:  SUBLW  05
098C:  BTFSS  03.0
098D:  GOTO   1AC
....................       { 
....................          glcd_rect(x1, y1, x2, y2, NO, ON); // GLCD'de dikdötrgen çizdiriliyor 
098E:  MOVF   32,W
098F:  MOVWF  36
0990:  MOVF   33,W
0991:  MOVWF  37
0992:  MOVF   34,W
0993:  MOVWF  38
0994:  MOVF   35,W
0995:  MOVWF  39
0996:  CLRF   3A
0997:  MOVLW  01
0998:  MOVWF  3B
0999:  GOTO   000
....................          y1=x1+=5; // y1=x1+5; anlamýnda 
099A:  MOVLW  05
099B:  ADDWF  32,F
099C:  MOVF   32,W
099D:  MOVWF  33
....................          x2-=5;    // x2=x2-5; anlamýnda 
099E:  MOVLW  05
099F:  SUBWF  34,F
....................          y2-=5;    // y2=y2-5; anlamýnda 
09A0:  SUBWF  35,F
....................          delay_ms(500); 
09A1:  MOVLW  02
09A2:  MOVWF  36
09A3:  MOVLW  FA
09A4:  MOVWF  37
09A5:  BCF    0A.3
09A6:  CALL   440
09A7:  BSF    0A.3
09A8:  DECFSZ 36,F
09A9:  GOTO   1A3
....................       } 
09AA:  INCF   31,F
09AB:  GOTO   18A
....................  
....................  
....................    } 
09AC:  GOTO   0B7
.................... } 
09AD:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG
